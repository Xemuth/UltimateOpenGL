#ifndef _UltimateOpenGL_V3_GameObject_h_
#define _UltimateOpenGL_V3_GameObject_h_
#include "Definition.h"
#include "Shader.h"
#include "Texture.h"
#include "Camera.h"
#include "Transform.h"

class GameObject: public Upp::Moveable<GameObject>{
	protected:
		Upp::String name="";
		Scene* scene = nullptr; //we use ptr because we want be able to create object without attaching it to a scene then load it on multiple scene 

		Transform transform;

		ACTION_FUNCTION onDraw =nullptr;
		ACTION_FUNCTION onTransform=nullptr; 
		bool DontDraw = false;

		//The GameObject carrying the light because I asume It's annoying to create 
		//an object light we have to bind with other 3D object just to simulate light emitted
		//by 3D Object
		Upp::VectorMap<Upp::String,DirLight> dirLights;    //All Lights generated by the Object
		Upp::VectorMap<Upp::String,PointLight> pointLights;//Basicly one object have 0 or 1 light but no 463 light
		Upp::VectorMap<Upp::String,SpotLight> spotLights;  //But you are doing as you think is better
	public:
		//*******GameObject**************************************
		GameObject();
		GameObject(const Upp::String& _name);
		GameObject(Scene* _scene);
		GameObject(Scene* _scene,const Upp::String& _name);
		GameObject(GameObject& object);
		virtual ~GameObject();
		virtual void operator=(GameObject& object);
		
		Scene* GetScene()const;
		GameObject& SetScene(Scene* _scene);
		
		Upp::String GetName()const;
		GameObject& SetName(const Upp::String& _name);
		
		void SetOnDrawFunction(void (*myFunction)(GameObject& myGameObject));
		ACTION_FUNCTION GetOnDrawFunction();
		void SetOnTransformFunction(void (*myFunction)(GameObject& myGameObject));
		ACTION_FUNCTION GetOnTransformFunction();
		
		void DisableDrawForNextFrame();
		bool IsDrawableDuringThisFrame();
		
		//******************Transform part**************************
		Transform& GetTransform();
		void SetTransform(const Transform& _transform);
		

		//******************Light part******************************
		Upp::VectorMap<Upp::String,DirLight>& GetDirLights();
		DirLight& AddDirLight(const Upp::String& _name);
		
		Upp::VectorMap<Upp::String,SpotLight>& GetSpotLights();
		SpotLight& AddSpotLight(const Upp::String& _name);
		
		Upp::VectorMap<Upp::String,PointLight>& GetPointLights();
		PointLight& AddPointLight(const Upp::String& _name);
		
		//Draw
		virtual void Draw(glm::mat4 model,glm::mat4 view,glm::mat4 projection,glm::mat4 transform,Camera& camera);
};
#endif
