#ifndef _UltimateOpenGL_Shader_h_
#define _UltimateOpenGL_Shader_h_
#include "Definition.h"
class Shader {
private:
	struct shader_Data : Upp::Moveable<shader_Data>{
		shader_Data();
		shader_Data(Upp::String _name,ShaderType _type,Upp::String _shader);
		shader_Data& operator=(const shader_Data& data);
		
		Upp::String name;
		ShaderType type;
		Upp::String shader;
	};
// utility function for checking shader compilation/linking errors.
	Upp::VectorMap<Upp::String,shader_Data> shaders;
	unsigned int ID;
	bool Compiled = false;
	bool AutoGenerated = false;
	bool CheckCompileErrors(unsigned int shader, ShaderType type);
public:
    Shader();
    Shader(Upp::String _name,ShaderType _type,Upp::String _shader);
    Shader(const Shader& _shader);
    Shader& operator=(const Shader& data);
	~Shader();

    Shader& AddShader(Upp::String _name,ShaderType _type,Upp::String _shader);
    Upp::VectorMap<Upp::String,Shader::shader_Data>& GetShaders();

    bool IsCompiled() const;
    bool IsAutoGenerated() const;
    unsigned int GetId() const;
    

    Shader& SetBool(Upp::String name, bool value);
    Shader& SetInt(Upp::String name, int value);
    Shader& SetFloat(Upp::String name, float value);

	Shader& SetVec2(Upp::String name, const glm::vec2 &value);
	Shader& SetVec2(Upp::String name, float x, float y);
	Shader& SetVec3(Upp::String name, const glm::vec3 &value);
	Shader& SetVec3(Upp::String name, float x, float y, float z);
	Shader& SetVec4(Upp::String name, const glm::vec4 &value);
	Shader& SetVec4(Upp::String name, float x, float y, float z, float w);
	Shader& SetMat2(Upp::String name, const glm::mat2 &mat);
	Shader& SetMat3(Upp::String name, const glm::mat3 &mat);
	Shader& SetMat4(Upp::String name, const glm::mat4 &mat);
	/*
	Shader& SetPointLight(Upp::String name, const PointLight &pointLight,int num =-1) const;
	Shader& SetDirLight(Upp::String name, const DirLight &dirLight,int num =-1) const;
	Shader& SetSpotLight(Upp::String name, const SpotLight &spotLight,int num =-1) const;
	
	Shader& SetMaterialColor(Upp::String name, Material &materialColor) const;
	Shader& SetMaterialTexture(Upp::String name, Material &materialTexture,bool CheckSpecular=true) const;
	*/
	bool Load(bool autoGenerated =false);
	bool Reload(bool autoGenerated =false);
	bool Unload();
	bool AssignSimpleShader();
	Shader& Use();
	Shader& Unbind();
};
#endif
